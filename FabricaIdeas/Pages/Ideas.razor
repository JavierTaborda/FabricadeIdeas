@page "/ideas"

@inject IIdeasService IdeaService
<p></p>
<p></p>
<h1>Ideas</h1>
<p></p>


@if (add == true & agregando == false & ideainsertada.IdIdea == 0)
{
    
    <BSForm Model="ideaform" Class="caja" IsRow="true" Gutters="Gutters.Medium" OnSubmit="Insert" OnReset="Reset">
        <DataAnnotationsValidator />
    <BSCol ColumnMedium="12">
        @_message
        <BSValidationSummary />
    </BSCol>
      <BSRow>
              
      <BSCol Column="3" >
                <BSLabel>Area</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="ideaform.AidArea">
                      <option value="">Seleccione...</option>
                      @foreach (var d in IdeaService.areas)
                    {
                  
                    <option value="@d.IdArea">@d.Anombre</option>
                    }
                    

                </BSInput>
                    <BSFeedback For="@(() => ideaform.Inombre)" ValidMessage="Correcto." />
            </BSCol> 
                 <BSCol Column="3" >
                    <BSLabel>Zona</BSLabel>
                        <BSInput InputType="InputType.Select" @bind-Value="ideaform.ZidZona">
                       <option value="">Seleccione...</option>
                      @foreach (var d in IdeaService.areas)
                    {
                        @foreach (var e in d.Zonas)
                        {
                           
                            if (e.AidArea == ideaform.AidArea)
                            {
                                
                                <option value="@e.IdZona">@e.Znombre</option>
                            }
                        }

                    }


                    </BSInput>
                        <BSFeedback For="@(() => ideaform.ZidZona)" ValidMessage="Correcto." />
                </BSCol> 

                        <BSCol Column="4">
                    <BSLabel>Nombre de la Idea</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="ideaform.Inombre"  />
                                 <BSFeedback For="@(() => ideaform.Inombre)" ValidMessage="Correcto." />
                    </BSCol>
          </BSRow> 
              <p></p>
               <p></p>
               <BSRow>
                        <BSCol Column="6">
                        <BSLabel>Descripcion del problema.</BSLabel>
                            <BSInput InputType="InputType.TextArea" @bind-Value="ideaform.Idesc"  />
                                 <BSFeedback For="@(() => ideaform.Idesc)" ValidMessage="Correcto." />
                        </BSCol>
                            <BSCol Column="6">
                            <BSLabel>Solucion al problema.</BSLabel>
                                    <BSInput InputType="InputType.TextArea" @bind-Value="ideaform.Isolu"  />
                                     <BSFeedback For="@(() => ideaform.Isolu)" ValidMessage="Correcto." />
                            </BSCol>
               </BSRow>
               <p></p>
               <p></p>

            <BSCol Column="12">
           <BSButton   Color="BSColor.Success"  Size="Size.ExtraSmall" IsSubmit>  Guardar <span class="oi oi-check"></span></BSButton>
           <BSButton   Color="BSColor.Primary"  Size="Size.ExtraSmall" IsReset>  Nuevo </BSButton>
            </BSCol>
       </BSForm>
       }
        else if (add == true & agregando == true & ideainsertada.IdIdea == 0 | add == false & agregando == true & ideainsertada.IdIdea == 0)
       {
              <BSRow Justify="Justify.Center">
                <BSCol Column="3">
                  <div class="loader"></div>
                </BSCol>  
             </BSRow>
               
       }

else if (ideainsertada.IdIdea !=0)
{
        <BSContainer Class="caja">
        <BSTable IsResponsive="true" IsStriped="true" >
        <BSTHead>
            <BSTR>
                <BSTD>Nombre</BSTD>
                <BSTD>Descripcion del Problema</BSTD>
                <BSTD>Descripcion de la Solucion</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            <BSTR>   
                    <BSTD>@ideainsertada.Inombre</BSTD>
                    <BSTD>@ideainsertada.Idesc </BSTD>
                    <BSTD>@ideainsertada.Isolu </BSTD>
            </BSTR>
        </BSTBody>

    </BSTable>     
    </BSContainer>
        <p></p>

        @*si se agregan objetivos se muestran aqui*@
    <BSContainer Class="caja">
        @if (objeinsertado.Count()>0)
    {
                 
                <BSTable IsResponsive="true" IsStriped="true" >
                <BSTHead>
                    <BSTR>
                        <BSTD>Objetivo</BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody>
                  
                    @foreach (var o in objeinsertado)
                    {                 
                        <BSTR>   
                            <BSTD>@o.Odesc</BSTD>
                        </BSTR>
                    }
                </BSTBody>

            </BSTable>     
                   <p></p>
    }
        <p></p>

        @*Insertar objetivos uno a uno*@


 
        @if (obload == false)
        {
            <BSForm Model="objeform" Class="caja" IsRow="true" Gutters="Gutters.Medium" OnSubmit="InsertOb">
                <DataAnnotationsValidator />
            <BSCol ColumnMedium="12">
                @_message
            <BSValidationSummary />
            </BSCol>
                <BSRow>
                           <BSCol Column="6">
                            <BSLabel>Describa un Objetivo de la Idea:</BSLabel>
                                        <BSInput InputType="InputType.TextArea" @bind-Value="objeform.Odesc"   />
                                       
                            </BSCol>
               </BSRow>
               <p></p>


            <BSCol Column="6">
           <BSButton   Color="BSColor.Success"  Size="Size.ExtraSmall" IsSubmit>  Guardar <span class="oi oi-check"></span></BSButton>
           <BSButton   Color="BSColor.Primary"  Size="Size.ExtraSmall" OnClick="FinObj">  Finalizar </BSButton>
            </BSCol>
       </BSForm>
       }
        else if (obload == true & responsables == false)
       {
                    <BSRow Justify="Justify.Center">
                        <BSCol Column="3">
                          <div class="loader"></div>
                        </BSCol>  
                     </BSRow>
       }
       </BSContainer>

}
        else
            {

            <BSRow Justify="Justify.Center">
            <BSCol  ColumnSmall="3">
                    <BSButton   Color="BSColor.Light"  Size="Size.Large" IsOutlined OnClick="Add"> Click para registrar tu idea </BSButton>
            </BSCol>
           
        </BSRow>
          
       }

       @*Responsblases*@
       
        @if (obload == true & responsables==true)
{
       
            @if (respoinsertado.Count() > 0)
            {
                       
                              
                 <BSContainer Class="caja">
                               <p>Responsables</p>
                        <BSTable IsResponsive="true" IsStriped="true" >
                        <BSTHead>
                            <BSTR>
                                <BSTD>#</BSTD>
                                <BSTD>Ficha</BSTD>
                                <BSTD>Nombre</BSTD>
                            </BSTR>
                        </BSTHead>
                        <BSTBody>

                @foreach (var o in respoinsertado)
                {                 
                                    <BSTR>   
                                        <BSTD>@o.Rnum</BSTD>
                                        <BSTD>@o.Rficha</BSTD>
                                        <BSTD>@o.Rnombre</BSTD>
                                    </BSTR>
                }
                        </BSTBody>

                    </BSTable>     
                  </BSContainer>
                }       
            <p></p>
                @if (inserres == true & responsables == false)
                {
                            <BSRow Justify="Justify.Center">
                                <BSCol Column="3">
                                  <div class="loader"></div>
                                </BSCol>  
                             </BSRow>
                }
                else if(end == true & responsables == false)
                {
                    <p></p>
                }
                else{
                    <BSContainer Class="caja">
                                <p>Agregue los responsables de la Idea:</p>
                    <BSForm Model="respform" Class="caja" IsRow="true" Gutters="Gutters.Medium" OnSubmit="InsertRes">
                    <DataAnnotationsValidator />
                    <BSCol ColumnMedium="12">
                        @_message
                    <BSValidationSummary />
                </BSCol>
                <BSRow>
                           <BSCol Column="2">
                            <BSLabel>#</BSLabel>
                             <BSInput InputType="InputType.Text" @bind-Value="respform.Rnum"  />
                                    <BSFeedback For="@(() => respform.Rnum)" ValidMessage="Correcto." />
                            </BSCol>
                                <BSCol Column="3">
                                <BSLabel>Ficha:</BSLabel>
                                <BSInput InputType="InputType.Text" @bind-Value="respform.Rficha"  />
                                <BSFeedback For="@(() => respform.Rficha)" ValidMessage="Correcto." />
                            </BSCol>
                            <BSCol Column="6">
                                <BSLabel>Nombre:</BSLabel>
                                <BSInput InputType="InputType.Text" @bind-Value="respform.Rnombre"  />
                                <BSFeedback For="@(() => respform.Rnombre)" ValidMessage="Correcto." />
                            </BSCol>
                </BSRow>
                <p></p>


                        <BSCol Column="6">
                    <BSButton   Color="BSColor.Success"  Size="Size.ExtraSmall" IsSubmit>  Guardar <span class="oi oi-check"></span></BSButton>
                    <BSButton   Color="BSColor.Primary"  Size="Size.ExtraSmall" OnClick="End">  Terminar Proceso </BSButton>
                    </BSCol>
                    </BSForm>  
                    
       
       
       </BSContainer>
  
       }
        
  

}
     

@code {
    Idea ideaform = new Idea();
    Objetivo objeform = new Objetivo();
    Respon respform = new Respon();
    List<Objetivo> objeinsertado = new List<Objetivo>();
    List<Respon> respoinsertado = new List<Respon>();

    Idea ideainsertada = new Idea();//recibe el id de la idea insertada para cargar lois responsables y obteivos
    private string _message = "";
    private DateTime fechahoy, fechatrabajo=DateTime.Today;
    private string fechahoy2;
    private bool add=false, end=false; //agregar idea y terminar proceso
    private bool agregando=false,obload=false;//mostrar spinner
    private bool objetivos=false;//mostrar objetivos
    private bool responsables = false, inserres = false;//mostrar responsables


    protected async Task Insert(EditContext e)
    {
        //Insertar Estatus
        agregando = true;
        foreach (var esta in IdeaService.estatus)
        {
            if(esta.Enivel==0)
            {
                ideaform.EidEsta = esta.IdEstatus;
            }
        }
        foreach (var premi in IdeaService.premio)
        {
            if (premi.Pobser == "Idea Registrada")
            {
                ideaform.PidPremi = premi.IdPremi;
            }
        }
        ideaform.IfecCra = DateTime.Now;
        ideaform.Iacti = true;
        ideainsertada = await IdeaService.InsertIdea(ideaform);
        agregando = false;

    }
    protected async Task Add()
    {
        agregando = true;
        await IdeaService.GetArea();
        await IdeaService.GetEstatus();
        await IdeaService.GetPremiacion();
        add = true;
        agregando = false;
    }

    protected async Task Zona()
    {
        await IdeaService.GetZona();
        add = true;
    }

    protected async Task Reset()
    {
        ideaform = new Idea();
        fechatrabajo = DateTime.Today;
    }

    //Objetivos
   
 protected async Task InsertOb(EditContext e)
    {
        //Insertar Estatus
        obload = true;
        objeform.IidIdea = ideainsertada.IdIdea;
        objeform.Oesta=true;
        objeinsertado = await IdeaService.InsertObjetivo(objeform, ideainsertada.IdIdea);  
        obload = false;
        objeform = new Objetivo();

    }
    protected async Task FinObj()
    {
        obload = true;
        responsables = true;
    }
    //responsables
    protected async Task InsertRes(EditContext e)
    {
        //Insertar Estatus
        inserres = true;
        respform.IidIdea = ideainsertada.IdIdea;
        respform.Resta = true;
        respoinsertado = await IdeaService.InsertResponsable(respform, ideainsertada.IdIdea);
        inserres = false;
        respform = new Respon();

    }
    protected async Task End()
    {
        ideaform = new Idea();
        objeform = new Objetivo();
        respform = new Respon();
        ideainsertada = new Idea();
        objeinsertado = new List<Objetivo>();
        respoinsertado = new List<Respon>();
        add = false; end = false;
        agregando = false; obload = false;
        objetivos = false;
        responsables = false;
        inserres = false;
    }
}
